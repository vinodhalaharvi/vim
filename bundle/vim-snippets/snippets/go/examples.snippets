snippet example_grpc_client_func
	// sample func ${1:FunctionName}  grpc client
	func $1(client pb.GrpcClientType, in *pb.inType) {
		ctx, cancel := context.WithTimeout(context.Background(), 10 * time.Second)
		defer cancel()
		it, err := client.GetFeature(ctx, in)
		if err != nil {
			log.Fatalf("%v.$1(_) = _, %v: ", client, err)
		}
		log.Println(it)
	}

snippet example_grpc_client_recv_stream
	// sample func ${1:FunctionName}  grpc client
	func $1(client pb.GrpcClientType, in *pb.InType) {
		log.Printf("Looking for features within %v", in)
		ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
		defer cancel()
		stream, err := client.Grpc$1(ctx, in)
		if err != nil {
			log.Fatalf("%v.$1(_) = _, %v", client, err)
		}
		for {
			feature, err := stream.Recv()
			if err == io.EOF {
				break
			}
			if err != nil {
				log.Fatalf("%v.ListFeatures(_) = _, %v", client, err)
			}
			log.Println(it)
		}
	}

snippet example_grpc_client_send_stream
	func runRecordRoute(client pb.RouteGuideClient) {
		// Create a random number of random points
		r := rand.New(rand.NewSource(time.Now().UnixNano()))
		pointCount := int(r.Int31n(100)) + 2 // Traverse at least two points
		var points []*pb.Point
		for i := 0; i < pointCount; i++ {
			points = append(points, randomPoint(r))
		}
		log.Printf("Traversing %d points.", len(points))
		ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
		defer cancel()
		stream, err := client.RecordRoute(ctx)
		if err != nil {
			log.Fatalf("%v.RecordRoute(_) = _, %v", client, err)
		}
		for _, point := range points {
			if err := stream.Send(point); err != nil {
				log.Fatalf("%v.Send(%v) = %v", stream, point, err)
			}
		}
		reply, err := stream.CloseAndRecv()
		if err != nil {
			log.Fatalf("%v.CloseAndRecv() got error %v, want %v", stream, err, nil)
		}
		log.Printf("Route summary: %v", reply)
	}


snippet example_grpc_client_bidi_stream
	func runRouteChat(client pb.RouteGuideClient) {
		notes := []*pb.RouteNote{
			{Location: &pb.Point{Latitude: 0, Longitude: 1}, Message: "First message"},
		}
		ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
		defer cancel()
		stream, err := client.RouteChat(ctx)
		if err != nil {
			log.Fatalf("%v.RouteChat(_) = _, %v", client, err)
		}
		waitc := make(chan struct{})
		go func() {
			for {
				in, err := stream.Recv()
				if err == io.EOF {
					// read done.
					close(waitc)
					return
				}
				if err != nil {
					log.Fatalf("Failed to receive a note : %v", err)
				}
				log.Printf("Got message %s at point(%d, %d)", in.Message, in.Location.Latitude, in.Location.Longitude)
			}
		}()
		for _, note := range notes {
			if err := stream.Send(note); err != nil {
				log.Fatalf("Failed to send a note: %v", err)
			}
		}
		stream.CloseSend()
		<-waitc
	}


snippet example_functional
	func main() {
		// Here we try out our various collection functions.
		var strs = []string{"peach", "apple", "pear", "plum"}
		fmt.Println(Index(strs, "pear"))
		fmt.Println(Include(strs, "grape"))
		fmt.Println(Any(strs, func(v string) bool {
			return strings.HasPrefix(v, "p")
		}))
		fmt.Println(All(strs, func(v string) bool {
			return strings.HasPrefix(v, "p")
		}))
		fmt.Println(Filter(strs, func(v string) bool {
			return strings.Contains(v, "e")
		}))
		// The above examples all used anonymous functions,
		// but you can also use named functions of the correct
		// type.
		fmt.Println(Map(strs, strings.ToUpper))
	}


snippet example_json_marshal
	type Message struct {
		Name string
		Body string
		Time int64
	}
	m := Message{"Alice", "Hello", 1294706395881547000}
	b, err := json.Marshal(m)
	if err != nil {
		log.Printf("err = %+v\n", err)
	}



snippet example_json_unmarshal
	var m Message
	if err := json.Unmarshal(b, &m); err != nil {
		log.Printf("err = %+v\n", err)
	}




snippet example_code_web_socket_client
	<!DOCTYPE html>
	<html lang="en">
	<head>
	<title>Chat Example</title>
	<script type="text/javascript">
	window.onload = function () {
		var conn;
		var msg = document.getElementById("msg");
		var log = document.getElementById("log");

		function appendLog(item) {
			var doScroll = log.scrollTop > log.scrollHeight - log.clientHeight - 1;
			log.appendChild(item);
			if (doScroll) {
				log.scrollTop = log.scrollHeight - log.clientHeight;
			}
		}

		document.getElementById("form").onsubmit = function () {
			if (!conn) {
				return false;
			}
			if (!msg.value) {
				return false;
			}
			conn.send(msg.value);
			msg.value = "";
			return false;
		};

		if (window["WebSocket"]) {
			conn = new WebSocket("ws://" + document.location.host + "/ws");
			conn.onclose = function (evt) {
				var item = document.createElement("div");
				item.innerHTML = "<b>Connection closed.</b>";
				appendLog(item);
			};
			conn.onmessage = function (evt) {
				var messages = evt.data.split('\n');
				for (var i = 0; i < messages.length; i++) {
					var item = document.createElement("div");
					item.innerText = messages[i];
					appendLog(item);
				}
			};
		} else {
			var item = document.createElement("div");
			item.innerHTML = "<b>Your browser does not support WebSockets.</b>";
			appendLog(item);
		}
	};
	</script>
	<style type="text/css">
	html {
		overflow: hidden;
	}

	body {
		overflow: hidden;
		padding: 0;
		margin: 0;
		width: 100%;
		height: 100%;
		background: gray;
	}

	#log {
		background: white;
		margin: 0;
		padding: 0.5em 0.5em 0.5em 0.5em;
		position: absolute;
		top: 0.5em;
		left: 0.5em;
		right: 0.5em;
		bottom: 3em;
		overflow: auto;
	}

	#form {
		padding: 0 0.5em 0 0.5em;
		margin: 0;
		position: absolute;
		bottom: 1em;
		left: 0px;
		width: 100%;
		overflow: hidden;
	}

	</style>
	</head>
	<body>
	<div id="log"></div>
	<form id="form">
		<input type="submit" value="Send" />
		<input type="text" id="msg" size="64"/>
	</form>
	</body>
	</html>


snippet example_grpc_client
	package main

	import (
		"context"
		"log"
		"os"
		"time"

		"google.golang.org/grpc"
		pb "google.golang.org/grpc/examples/helloworld/helloworld"
	)

	const (
		address     = "localhost:50051"
		defaultName = "world"
	)

	func main() {
		// Set up a connection to the server.
		conn, err := grpc.Dial(address, grpc.WithInsecure())
		if err != nil {
			log.Fatalf("did not connect: %v", err)
		}
		defer conn.Close()
		c := pb.NewGreeterClient(conn)

		// Contact the server and print out its response.
		name := defaultName
		if len(os.Args) > 1 {
			name = os.Args[1]
		}
		ctx, cancel := context.WithTimeout(context.Background(), time.Second)
		defer cancel()
		r, err := c.SayHello(ctx, &pb.HelloRequest{Name: name})
		if err != nil {
			log.Fatalf("could not greet: %v", err)
		}
		log.Printf("Greeting: %s", r.Message)
	}

snippet example_grpc_server
	package main

	import (
		"context"
		"log"
		"net"

		"google.golang.org/grpc"
		pb "google.golang.org/grpc/examples/helloworld/helloworld"
	)

	const (
		port = ":50051"
	)

	// server is used to implement helloworld.GreeterServer.
	type server struct{}

	// SayHello implements helloworld.GreeterServer
	func (s *server) SayHello(ctx context.Context, in *pb.HelloRequest) (*pb.HelloReply, error) {
		log.Printf("Received: %v", in.Name)
		return &pb.HelloReply{Message: "Hello " + in.Name}, nil
	}

	func main() {
		lis, err := net.Listen("tcp", port)
		if err != nil {
			log.Fatalf("failed to listen: %v", err)
		}
		s := grpc.NewServer()
		pb.RegisterGreeterServer(s, &server{})
		if err := s.Serve(lis); err != nil {
			log.Fatalf("failed to serve: %v", err)
		}
	}

snippet example_grpc_server_bidi_stream
	func serialize(it *pb.DataType) string {
		return fmt.Sprintf("%d %s", it.Id, it.Name)
	}

	func (s *server) SomeName(stream pb.RouteGuide_RouteChatServer) error {
		for {
			in, err := stream.Recv()
			if err == io.EOF {
				return nil
			}
			if err != nil {
				return err
			}
			key := serialize(in.Id, in.Name)

			s.mu.Lock()
			s.routeNotes[key] = append(s.dataOfType[key], in)
			items := make([]*pb.Type, len(s.dataOfType[key]))
			copy(items, s.dataOfType[key])
			s.mu.Unlock()

			for _, note := range items {
				if err := stream.Send(note); err != nil {
					return err
				}
			}
		}
	}




snippet example_grpc_routeguide_server_getfeature
	func (s *routeGuideServer) GetFeature(ctx context.Context, point *pb.Point) (*pb.Feature, error) {
		for _, feature := range s.savedFeatures {
			if proto.Equal(feature.Location, point) {
				return feature, nil
			}
		}
		return &pb.Feature{Location: point}, nil
	}

snippet example_grpc_routeguide_server_listfeatures
	func (s *routeGuideServer) ListFeatures(rect *pb.Rectangle, stream pb.RouteGuide_ListFeaturesServer) error {
		for _, feature := range s.savedFeatures {
			if inRange(feature.Location, rect) {
				if err := stream.Send(feature); err != nil {
					return err
				}
			}
		}
		return nil
	}

snippet example_grpc_routeguide_server_recordroute
	func (s *routeGuideServer) RecordRoute(stream pb.RouteGuide_RecordRouteServer) error {
		var pointCount, featureCount, distance int32
		var lastPoint *pb.Point
		startTime := time.Now()
		for {
			point, err := stream.Recv()
			if err == io.EOF {
				endTime := time.Now()
				return stream.SendAndClose(&pb.RouteSummary{
					PointCount:   pointCount,
					FeatureCount: featureCount,
					Distance:     distance,
					ElapsedTime:  int32(endTime.Sub(startTime).Seconds()),
				})
			}
			if err != nil {
				return err
			}
			pointCount++
			for _, feature := range s.savedFeatures {
				if proto.Equal(feature.Location, point) {
					featureCount++
				}
			}
			if lastPoint != nil {
				distance += calcDistance(lastPoint, point)
			}
			lastPoint = point
		}
	}



snippet example_code_websocket_server
	//routes
	type Route struct {
		Name    string
		Path    string
		Handler http.Handler
		Methods []string
	}

	var routes = []Route{
		{
			Name:    "HomeHandler",
			Path:    "/",
			Handler: new(HomeHandler),
			Methods: []string{"GET", "POST"},
		},
		{
			Name:    "WsHandler",
			Path:    "/ws",
			Handler: new(WsHandler),
			Methods: []string{"GET", "POST"},
		},
	}

	//helpers
	func Logger(inner http.Handler, name string) http.Handler {
		return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
			start := time.Now()

			inner.ServeHTTP(w, r)

			log.Printf(
				"%s\t%s\t%s\t%s",
				r.Method,
				r.RequestURI,
				name,
				time.Since(start),
			)
		})
	}

	//handlers
	//home handler
	type HomeHandler struct{}

	func (h *HomeHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {
		w.WriteHeader(200)
		w.Write([]byte("hello world out there !\n"))
	}

	var upgrader = websocket.Upgrader{
		ReadBufferSize:  1024,
		WriteBufferSize: 1024,
	}

	//web socket handler
	type WsHandler struct{}

	func (h *WsHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {
		// serveWs handles websocket requests from the peer.
		conn, err := upgrader.Upgrade(w, r, nil)
		if err != nil {
			log.Println(err)
			return
		}
		fmt.Printf("%s\n", conn)
		//do something with conn here
	}

	//json handler
	type JsonHandler struct{}

	//your type goes in here
	type JsonType struct{}

	func (jh *JsonHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {
		var jsonData JsonType
		body, err := ioutil.ReadAll(io.LimitReader(r.Body, 1048576))
		if err != nil {
			panic(err)
		}
		if err := r.Body.Close(); err != nil {
			panic(err)
		}
		if err := json.Unmarshal(body, &jsonData); err != nil {
			w.Header().Set("Content-Type", "application/json; charset=UTF-8")
			w.WriteHeader(422) // unprocessable entity
			if err := json.NewEncoder(w).Encode(err); err != nil {
				panic(err)
			}
		}

		//do something with jsonData
		w.Header().Set("Content-Type", "application/json; charset=UTF-8")
		w.WriteHeader(http.StatusCreated)
		/*
			//optionally write back some json data
			if err := json.NewEncoder(w).Encode(jsonData); err != nil {
				log.Fatal(err)
			}
		*/
	}

	func main() {
		var router = mux.NewRouter()
		for _, route := range routes {
			router.
				Methods(route.Methods...).
				Path(route.Path).
				Name(route.Name).
				Handler(Logger(route.Handler, route.Name))

		}
		fmt.Printf("%s\n", "Server listening on :8000")
		log.Fatal(http.ListenAndServe(":8000", router))
	}



snippet example_code_nested_structs
	// nested struct definitions
	type some struct {
		s1      *some1
		closeCh chan struct{}
		doneCh  chan struct{}
		others  []*other
	}

	type some1 struct {
	}

	type other struct {
	}

	func makeSome() *some {
		return &some{
			doneCh:  make(chan struct{}),
			closeCh: make(chan struct{}),
		}
	}

	func (b *some) makeSome1() {
		b.s1 = &some1{}
	}

	func (b *some) makeOthers(numothers int) {
		others := make([]*other, numothers)

		for i := 0; i < numothers; i++ {
			others[i] = &other{}
		}
		b.others = others
	}

	func (b *some) close() {
		close(b.closeCh)
	}

	func (b *some) run() {
		//do work in go routine and wait for done
		<-b.doneCh
	}

	func main() {
		b := makeSome()
		b.makeSome1()
		b.makeOthers(10)
		fmt.Printf("%s\n", b)
	}



