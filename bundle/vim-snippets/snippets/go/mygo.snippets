snippet findex
	// Returns the first index of the target t, or
	// -1 if no match is found.
	func Index(vs []${1:string}, t $1) int {
		for i, v := range vs {
			if v == t {
				return i
			}
		}
		return -1
	}

	// returns int
	Index(items, item)
snippet finclude
	// Returns true if the target t is in the
	// slice.
	func Include(vs []${1:string}, t $1) bool {
		return Index(vs, t) >= 0
	}

	//return bool
	Include(items, item)
snippet fany
	// Returns true if one of the items in the slice
	// satisfies the predicate f.
	func Any(vs []${1:string}, f func($1) bool) bool {
		for _, v := range vs {
			if f(v) {
				return true
			}
		}
		return false
	}

	//returns bool
	Any(items, func(it $1) bool {
	})
snippet fall
	// Returns true if all of the items in the slice
	// satisfy the predicate f.
	func All(vs []${1:string}, f func($1) bool) bool {
		for _, v := range vs {
			if !f(v) {
				return false
			}
		}
		return true
	}
	
	//returns bool
	All(items, func(it $1) bool {
	})
snippet ffilter
	// Returns a new slice containing all items in the
	// slice that satisfy the predicate f.
	func Filter(vs []${1:string}, f func($1) bool) []$1 {
		vsf := make([]$1, 0)
		for _, v := range vs {
			if f(v) {
				vsf = append(vsf, v)
			}
		}
		return vsf
	}
	//returns []$1
	Filter(items, func(it $1) bool {
	})
snippet fmap
	// Returns a new slice containing the results of applying
	// the function f to each string in the original slice.
	func Map(vs []${1:string}, f func($1) $1) []$1 {
		vsm := make([]$1, len(vs))
		for i, v := range vs {
			vsm[i] = f(v)
		}
		return vsm
	}

	//returns []$1
	Map(items, func(it $1) $1 {
	})
snippet if_err_fatal
	if err != nil {
		log.Fatal(err)
	}
snippet fun_chan_return_chan
	func ${1:name}(in <-chan ${2:type}) <-chan $2 {
		out := make(chan $2)
		go func() {
			for n := range in {
				// out <- n * n
				// Apply transformation here
			}
			close(out)
		}()
		return out
	}
snippet fun_map_chan_return_chan
	func ${1:name}(in <-chan ${2:type}, f func($2) ${3:output_type}) <-chan $3 {
		out := make(chan $3)
		go func() {
			for n := range in {
				out <- f(n)
			}
			close(out)
		}()
		return out
	}

	$1(in, func(it $2) $3 {
		//return value of type $3
	})


snippet fun_done_chan_chan
	func ${1:functionName}(done <-chan struct{}, 
			readChan <-chan ${2:readChanType}, 
			writeChan chan<- ${3:writeChanType}) {
		for it := range readChan {
			select {
				case writeChan <- it: // do something with it
				case <-done:
					return
			}
		}
	}

snippet dispatcher
	func ${1:Dispatcher}(done <-chan struct{}, 
		inputChan <-chan ${2:inputChanType},
		resultChan chan<- ${3:resultChanType}){
		var wg sync.WaitGroup
		const numWorkers = ${4:numOfWorkers}
		wg.Add(numWorkers)
		for i := 0; i < numWorkers; i++ {
			go func() {
				//SomeFunction(done, inputChan, resultChan)
				wg.Done()
			}()
		}
		go func() {
			wg.Wait()
			close(resultChan)
		}()
	}


snippet json_encoder
	c := struct{}{}
	b, err := json.Marshal(&c)
	if err != nil {
		fmt.Println("error:", err)
	}

snippet json_decoder
	type ${1:jsonRecordType} struct{ 
		${2}
	}
	dec := json.NewDecoder(strings.NewReader(jsonStream))
	for {
		var m $1
		if err := dec.Decode(&m); err == io.EOF {
			break
		} else if err != nil {
			log.Fatal(err)
		}
		//do something with m

	}


# net related
snippet array_to_chan
	func gen(${1:items} ...${2:input type}) <-chan ${3:output type} {
		out := make(chan $3)
		go func() {
			for _, n := range $1 {
				out <- $4
			}
			close(out)
		}()
		return out
	}
	$0

snippet go_func_wait_group
	var wg sync.WaitGroup
	wg.Add(${1:count})
	go func() {
		defer wg.Done()
		// do something here
	}()
	wg.Wait()


snippet websocket_read_write
	func ${1:functionName}(w http.ResponseWriter, r *http.Request) {
		c, err := upgrader.Upgrade(w, r, nil)
		if err != nil {
			log.Fatal("upgrade:", err)
			return
		}
		defer c.Close()
		for {
			mt, message, err := c.ReadMessage()
			if err != nil {
				log.Fatal("read:", err)
				break
			}
			log.Fatal("recv: %s", message)
			err = c.WriteMessage(mt, message)
			if err != nil {
				log.Fatal("write:", err)
				break
			}
		}
	}

snippet websocket_read
	func ${1:functionName}(w http.ResponseWriter, r *http.Request) {
		c, err := upgrader.Upgrade(w, r, nil)
		if err != nil {
			log.Fatal("upgrade:", err)
			return
		}
		defer c.Close()
		for {
			mt, message, err := c.ReadMessage()
			if err != nil {
				log.Fatal("read:", err)
				break
			}
			log.Fatal("recv: %s", message)
		}
	}


snippet websocket_write
	func ${1:functionName}(w http.ResponseWriter, r *http.Request) {
		c, err := upgrader.Upgrade(w, r, nil)
		if err != nil {
			log.Fatal("upgrade:", err)
			return
		}
		defer c.Close()
		for {
			err = c.WriteMessage(mt, message)
			if err != nil {
				log.Fatal("write:", err)
				break
			}
		}
	}

snippet code_array_of_structs
	as := []struct {
		FirstName string
		LastName  string
	}{
		{"First", "Last"},
	}
	for _, it := range as {
		//process it
	}



snippet code_key_value_datastore
	// mini key value in memory database
	package main

	//CREDIT: https://hackernoon.com/dancing-with-go-s-mutexes-92407ae927bf
	import (
		"sync"
	)

	type DataStore struct {
		sync.Mutex
		cache map[string]${1:valueType}
	}

	func NewStore() *DataStore {
		return &DataStore{
			cache: make(map[string]$1),
		}
	}

	func (ds *DataStore) set(key string, value $1) {
		ds.cache[key] = value
	}

	func (ds *DataStore) get(key string) []byte {
		if ds.count() > 0 {
			item := ds.cache[key]
			return item
		}
		return []byte("")
	}

	func (ds *DataStore) count() int {
		return len(ds.cache)
	}

	func (ds *DataStore) Set(key string, value $1) {
		ds.Lock()
		defer ds.Unlock()
		ds.set(key, value)
	}

	func (ds *DataStore) Get(key string) $1 {
		ds.Lock()
		defer ds.Unlock()
		return ds.get(key)
	}

	func (ds *DataStore) Count() int {
		ds.Lock()
		defer ds.Unlock()
		return ds.count()
	}

	func main() {
		store := NewStore()
		for i := 0; i < 10000000; i++ {
			store.Set("Go", "Lang")
			store.Get("Go")
		}
	}


snippet stream_to_byte
	import "bytes"

	func StreamToByte(stream io.Reader) []byte {
	  buf := new(bytes.Buffer)
		buf.ReadFrom(stream)
		return buf.Bytes()
	}

snippet stream_to_string
	func StreamToString(stream io.Reader) string {
		buf := new(bytes.Buffer)
		buf.ReadFrom(stream)
		return buf.String()
	}


snippet grpc_stream_receive
	for { 
		in, err := stream.Recv()
		if err == io.EOF {
			return nil
		}
		if err != nil {
			return err
		}
	}

snippet grpc_stream_send
	if err := stream.Send(note); err != nil {
		return err
	}


snippet grpc_stream_for_send
	${1:items} := make([]*data_type{Key: Value})
	for _, note := range ${1} {
		if err := stream.Send(note); err != nil {
			return err
		}
	}
snippet grpc_bidi_stream
		for {

			//ready to receive
			in, err := stream.Recv()
			if err == io.EOF {
				return nil
			}
			if err != nil {
				return err
			}

			//initialize data, get data, set data
 
			//ready to send
			for it := items {
				if err := stream.Send(it); err != nil {
					return err
				}
			}
		}
	}


snippet read_in_json_file
	var data []byte
	if filePath != "" {
		var err error
		data, err = ioutil.ReadFile(filePath)
		if err != nil {
			log.Fatalf("Failed to load default features: %v", err)
		}
	}
	if err := json.Unmarshal(data, &s.savedFeatures); err != nil {
		log.Fatalf("Failed to load default features: %v", err)
	}


snippet grpc_server_tls
	func main() {
			flag.Parse()
			lis, err := net.Listen("tcp", fmt.Sprintf("localhost:%d", *port))
			if err != nil {
				log.Fatalf("failed to listen: %v", err)
			}
			var opts []grpc.ServerOption
			if *tls {
				if *certFile == "" {
					*certFile = testdata.Path("server1.pem")
				}
				if *keyFile == "" {
					*keyFile = testdata.Path("server1.key")
				}
				creds, err := credentials.NewServerTLSFromFile(*certFile, *keyFile)
				if err != nil {
					log.Fatalf("Failed to generate credentials %v", err)
				}
				opts = []grpc.ServerOption{grpc.Creds(creds)}
			}
			grpcServer := grpc.NewServer(opts...)
			pb.RegisterRouteGuideServer(grpcServer, newServer())
			grpcServer.Serve(lis)
		}

snippet grpc_routeguide_client_randompoint
	func randomPoint(r *rand.Rand) *pb.Point {
		lat := (r.Int31n(180) - 90) * 1e7
		long := (r.Int31n(360) - 180) * 1e7
		return &pb.Point{Latitude: lat, Longitude: long}
	}


snippet get_grpc_client_conn
		conn, err := grpc.Dial(address, grpc.WithInsecure())
		if err != nil {
			log.Fatalf("did not connect: %v", err)
		}
		defer conn.Close()
snippet get_grpc_client_context
		ctx, cancel := context.WithTimeout(context.Background(), time.Second)
		defer cancel()
snippet get_grpc_client_conn_context
		conn, err := grpc.Dial(address, grpc.WithInsecure())
		if err != nil {
			log.Fatalf("did not connect: %v", err)
		}
		defer conn.Close()
		ctx, cancel := context.WithTimeout(context.Background(), time.Second)
		defer cancel()
		c := pb.GrpcClientType(conn)
snippet get_grpc_client_recv_stream
		// client side grpc ${1:FunctionName}
		stream, err := client.Grpc$1(ctx, in)
		if err != nil {
			log.Fatalf("%v.RecordRoute(_) = _, %v", client, err)
		}
		for {
			feature, err := stream.Recv()
			if err == io.EOF {
				break
			}
			if err != nil {
				log.Fatalf("%v.ListFeatures(_) = _, %v", client, err)
			}
			log.Println(it)
		}
	}
snippet get_grpc_client_send_stream
		// client side grpc ${1:FunctionName}
		stream, err := client.Grpc$1(ctx)
		if err != nil {
			log.Fatalf("%v.$1(_) = _, %v", client, err)
		}
		//
		for it := items {
			if err := stream.Send(it); err != nil {
				log.Fatalf("%v.Send(%v) = %v", stream, it, err)
			}
		}
		reply, err := stream.CloseAndRecv()
		if err != nil {
			log.Fatalf("%v.CloseAndRecv() got error %v, want %v", stream, err, nil)
		}
		log.Printf("Reply from server: %v", reply)
	}

snippet get_grpc_client_bidi_stream
	// client side grpc ${1:FunctionName}
	func run$1(client pb.GrpcTypeClient) { 
		items := []*pb.ItemType{}
		ctx, cancel := context.WithTimeout(context.Background(), 10 * time.Second)
		defer cancel()
		stream, err := client.$1(ctx)
		if err != nil {
			log.Fatalf("%v.$1(_) = _, %v", client, err)
		}
		waitc := make(chan struct{})
		go func() {
			for {
				in, err := stream.Recv()
				if err == io.EOF {
					// read done.
					close(waitc)
					return
				}
				if err != nil {
					log.Fatalf("Failed to receive a note : %v", err)
				}
				log.Printf("Got message %s at point(%d, %d)", in.Message, in.Location.Latitude, in.Location.Longitude)
			}
		}()
		for _, note := range notes {
			if err := stream.Send(note); err != nil {
				log.Fatalf("Failed to send a note: %v", err)
			}
		}
		stream.CloseSend()
		<-waitc
	}


snippet grpc_server
	const (
		port = ":50051"
	)
	
	type server struct{}

	// client side grpc ${1:GrpcType}
	lis, err := net.Listen("tcp", port)
	if err != nil {
		log.Fatalf("failed to listen: %v", err)
	}
	s := grpc.NewServer()
	pb.Register$1Server(s, &server{})
	if err := s.Serve(lis); err != nil {
		log.Fatalf("failed to serve: %v", err)
	}

snippet retry_using_timeout
	const timeout = 30 * time.Second
	deadline := time.Now().Add(timeout)
	for tries := 0; time.Now().Before(deadline); tries++ {
		//TODO your code here
		log.Printf("r = %+v\n", r)
		if err == nil {
			return nil
		}
		time.Sleep(time.Second << uint(tries)) // exponential back-off
	}
